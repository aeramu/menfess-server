// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	service "github.com/aeramu/menfess-server/internal/auth/service"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Auth provides a mock function with given fields: req
func (_m *Service) Auth(req service.AuthReq) (*service.Payload, error) {
	ret := _m.Called(req)

	var r0 *service.Payload
	if rf, ok := ret.Get(0).(func(service.AuthReq) *service.Payload); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Payload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service.AuthReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *Service) Login(req service.LoginReq) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(service.LoginReq) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service.LoginReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: req
func (_m *Service) Logout(req service.LogoutReq) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(service.LogoutReq) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: req
func (_m *Service) Register(req service.RegisterReq) (string, error) {
	ret := _m.Called(req)

	var r0 string
	if rf, ok := ret.Get(0).(func(service.RegisterReq) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service.RegisterReq) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
